#include <stdio.h>
#include <stdlib.h>
#include <memory.h>


void pile_initialiser(int* pile[], int* nb_elements);
void pile_detruire(int pile[], int* nb_elements);
void pile_ajouter(int* pile[], int* nb_elements, int entier);
void pile_copier(int* pile_destination[], int* nb_elements_destination, int pile_source[], int nb_elements_source);
void pile_afficher(int pile[], int nb_elements);
int pile_enlever(int* pile[], int* nb_elements);

int main()
{
	int *pile[] = {NULL};
	int nb_elements;

	pile_initialiser(pile, &nb_elements);

	pile_ajouter(pile, &nb_elements, 12);
	//pile_ajouter(pile, &nb_elements, 24);
	//pile_ajouter(pile, &nb_elements, 48);

	pile_afficher(pile[0], nb_elements);

	return 0;
}

void pile_initialiser(int* pile[], int* nb_elements)
{
	*nb_elements = 0;
	*pile = (int *)calloc(*nb_elements, sizeof(int*));
}

void pile_detruire(int pile[], int* nb_elements)
{
	*nb_elements = 0;
	free(pile);
}

void pile_ajouter(int* pile[], int* nb_elements, int entier)
{
	int nb_elements_temporaire = (*nb_elements) + 1;
	int* pile_temporaire[] = {NULL};

	*pile_temporaire = (int *)calloc(nb_elements_temporaire, sizeof(int*));

	pile_copier(&pile_temporaire[1], &nb_elements_temporaire, *pile, *nb_elements);

	*pile_temporaire[0] = entier;

	pile_detruire(*pile, nb_elements);

	*pile = *pile_temporaire;

	*nb_elements = nb_elements_temporaire;
}

void pile_afficher(int pile[], int nb_elements)
{
	int i;

	for(i = nb_elements -1; i >= 0; i--)
	{
		printf("Deplacement #%d : %d\n", i, pile[i]);
	}
}

int pile_enlever(int* pile[], int* nb_elements)
{
	int nb_elements_temporaire = *nb_elements - 1;
	int* pile_temporaire[] = {NULL};
	int entier;

	entier = *pile[*nb_elements - 1];

	pile_initialiser(pile_temporaire, &nb_elements_temporaire);

	pile_copier(pile_temporaire, &nb_elements_temporaire, *pile, *nb_elements);

	pile_detruire(*pile, nb_elements);

	pile_initialiser(pile, &nb_elements_temporaire);

	pile_copier(pile, &nb_elements_temporaire, *pile_temporaire, nb_elements_temporaire);

	pile_detruire(*pile_temporaire, &nb_elements_temporaire);

	*nb_elements = nb_elements_temporaire;

	return entier;
}

void pile_copier(int* pile_destination[], int* nb_elements_destination, int pile_source[], int nb_elements_source)
{
	memcpy(*pile_destination, pile_source, sizeof(int) * (*nb_elements_destination)); 
	
	//nb_elements_destination serait Ã  remplacer par nb_elements_source dans le memcry, sinon, pour:
	//pile_source[6] et pile_destination[7], pile_source copie 7 de seselement dans pile_destination
}
